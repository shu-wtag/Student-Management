// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentManagement.DataAccess.Context;

#nullable disable

namespace StudentManagement.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241007050215_StudentManagementMigration")]
    partial class StudentManagementMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.Property<int>("CoursesID")
                        .HasColumnType("int");

                    b.Property<int>("StudentsID")
                        .HasColumnType("int");

                    b.HasKey("CoursesID", "StudentsID");

                    b.HasIndex("StudentsID");

                    b.ToTable("CourseStudent");
                });

            modelBuilder.Entity("CourseTeacher", b =>
                {
                    b.Property<int>("TeachersID")
                        .HasColumnType("int");

                    b.Property<int>("coursesID")
                        .HasColumnType("int");

                    b.HasKey("TeachersID", "coursesID");

                    b.HasIndex("coursesID");

                    b.ToTable("CourseTeacher");
                });

            modelBuilder.Entity("StudentManagement.Domain.Entities.Course", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Course_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("credits")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            ID = 111,
                            Course_Name = "A111",
                            credits = 3
                        },
                        new
                        {
                            ID = 112,
                            Course_Name = "A112",
                            credits = 2
                        });
                });

            modelBuilder.Entity("StudentManagement.Domain.Entities.CourseTeach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("courseIDID")
                        .HasColumnType("int");

                    b.Property<int?>("teach_IDID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("courseIDID");

                    b.HasIndex("teach_IDID");

                    b.ToTable("CourseTeaches");
                });

            modelBuilder.Entity("StudentManagement.Domain.Entities.Enrollment", b =>
                {
                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Enroll_date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("StudentManagement.Domain.Entities.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Email = "a1@gmail.com",
                            Name = "A"
                        },
                        new
                        {
                            ID = 2,
                            Email = "b2@gmail.com",
                            Name = "B"
                        },
                        new
                        {
                            ID = 3,
                            Email = "c3@gmail.com",
                            Name = "C"
                        });
                });

            modelBuilder.Entity("StudentManagement.Domain.Entities.Teacher", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.HasOne("StudentManagement.Domain.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagement.Domain.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseTeacher", b =>
                {
                    b.HasOne("StudentManagement.Domain.Entities.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagement.Domain.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("coursesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentManagement.Domain.Entities.CourseTeach", b =>
                {
                    b.HasOne("StudentManagement.Domain.Entities.Course", "courseID")
                        .WithMany("CourseTeaches")
                        .HasForeignKey("courseIDID");

                    b.HasOne("StudentManagement.Domain.Entities.Teacher", "teach_ID")
                        .WithMany("CourseTeaches")
                        .HasForeignKey("teach_IDID");

                    b.Navigation("courseID");

                    b.Navigation("teach_ID");
                });

            modelBuilder.Entity("StudentManagement.Domain.Entities.Enrollment", b =>
                {
                    b.HasOne("StudentManagement.Domain.Entities.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagement.Domain.Entities.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentManagement.Domain.Entities.Course", b =>
                {
                    b.Navigation("CourseTeaches");

                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("StudentManagement.Domain.Entities.Student", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("StudentManagement.Domain.Entities.Teacher", b =>
                {
                    b.Navigation("CourseTeaches");
                });
#pragma warning restore 612, 618
        }
    }
}
